buildscript {
    repositories {
	jcenter()
    }

    dependencies {
	classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:2.2.+'
    }
}

plugins {
    id 'java'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.7.3'
    id 'com.github.hierynomus.license' version '0.14.0'
}

subprojects {
    if (it.name != 'docs') {
	apply from: "${rootProject.rootDir}/gradle/common.gradle"
    }
}

bintray {
    user = System.getenv('BINTRAY_NAME')
    key = System.getenv('BINTRAY_APIKEY')
    publications = ['mavenJava']
    pkg {
        repo = 'JungleComputing'
        userOrg = "$user"
        vcsUrl = 'https://github.com/junglecomputing/ipl.git'
        licenses = ['Apache-2.0']
    }
}

apply plugin: 'maven-publish'

publishing {
    publications {
	mavenJava(MavenPublication) {
	    groupId 'junglecomputing'
	    subprojects.each {
		if (it.name != 'docs' && it.name != '.') {
		    this.setupPublishing(it)
		}
	    }
	}
    }
}

private void setupPublishing(final Project p) {
    p.apply plugin: 'maven-publish'

    p.publishing {
	publications {
	    mavenJava(MavenPublication) {
		groupId 'junglecomputing'
		artifactId p.archivesBaseName
		from p.components.java
		artifact p.sourcesJar {
		    classifier "sources"
		}
		artifact p.javadocJar {
		    classifier "javadoc"
		}
	    }
	}
    }
}

defaultTasks 'clean', 'assemble', 'pdflatex'

dependencies {
    compile project(path: 'api')
    compile project(path: 'compile')
    compile project(path: 'support')
    compile project(path: 'util')
    compile project(path: 'io')
    compile project(path: 'benchmarks')
    compile project(path: 'examples')
    compile project(path: 'impl-nio')
    compile project(path: 'impl-multi')
    compile project(path: 'impl-tcp')
    compile project(path: 'impl-smartsockets')
    compile project(path: 'impl-stacking-dummy')
    compile project(path: 'impl-stacking-lrmc')
}

apply plugin: 'nebula-aggregate-javadocs'
